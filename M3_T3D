#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <algorithm>
#include <mutex>
#include <condition_variable>
#include <queue>
#include <thread>
#include <chrono>
#include <mpi.h>

using namespace std;
using namespace std::chrono;

mutex mutex1;

// initializing number of threads for prod and cons
int prod_threads = 2;
int cons_threads = 2;

int hour_ind = 48; // this value will be used to check if an hour passed by (48 rows for an hour)

int prod_count = 0; // prod counter
int cons_count = 0; // cons counter
int rows = 0;       // number of rows

condition_variable producer_cv, consumer_cv; // initializing condition variables for prod and cons

// string variables and vectors are initialized to get values from the data file
vector<int> in;
vector<int> tr_light;
vector<int> no_cars;
vector<string> tstamp;

// struct for traffic data row
struct tr_signal
{
    int ind;
    std::string t_stamp;
    int tr_id;
    int num_cars;
};

// tr_signal array of four is initialized to hold the totals of each of the 4 traffic lights
tr_signal tlSorter[4] = {{0, "", 1, 0}, {0, "", 2, 0}, {0, "", 3, 0}, {0, "", 4, 0}};

// queue to store traffic light data
queue<tr_signal> tr_sig_queue;
tr_signal sig;

// function to sort traffic light data
bool sort_method(struct tr_signal first, struct tr_signal second)
{
    return first.num_cars > second.num_cars;
}

void produce()
{
    while (prod_count < rows)
    {
        unique_lock<mutex> lk(mutex1); // locking until producer finishes processing

        if (prod_count < rows) // if count is less than the number of rows in the dataset
        {
            tr_sig_queue.push(tr_signal{in[prod_count], tstamp[prod_count], tr_light[prod_count], no_cars[prod_count]}); // push into queue
            consumer_cv.notify_all();                                                                                    // notifying consumer threads
            prod_count++;
        }
        else
        {
            producer_cv.wait(lk, []
                             { return prod_count < rows; }); // if count is greater than the number of rows in the data set wait
        }

        lk.unlock(); // unlock after processing
        this_thread::sleep_for(chrono::milliseconds(rand() % 3000));
    }
}

void consume()
{
    string last_printed_timestamp; // Variable to store the last printed timestamp
    bool hour_printed = false;     // Flag to indicate if output for the current hour has been printed

    while (cons_count < rows)
    {
        unique_lock<mutex> lk(mutex1);

        if (!tr_sig_queue.empty())
        {
            sig = tr_sig_queue.front();

            switch (sig.tr_id)
            {
            case 1:
                tlSorter[0].num_cars += sig.num_cars;
                break;
            case 2:
                tlSorter[1].num_cars += sig.num_cars;
                break;
            case 3:
                tlSorter[2].num_cars += sig.num_cars;
                break;
            case 4:
                tlSorter[3].num_cars += sig.num_cars;
                break;
            default:
                break;
            }

            tr_sig_queue.pop();
            producer_cv.notify_all();
            cons_count++;

            if (cons_count % hour_ind == 0 && sig.t_stamp != last_printed_timestamp && !hour_printed)
            { // Check if an hour has passed, the current timestamp is different from the last printed timestamp, and output for the current hour has not been printed
                sort(tlSorter, tlSorter + 4, sort_method);
                printf("Traffic lights sorted according to most busy | Time: %s \n", sig.t_stamp.c_str());
                cout << "Traffic Light"
                     << "\t"
                     << "Number of Cars" << endl;
                for (int i = 0; i < 4; ++i)
                {
                    cout << tlSorter[i].tr_id << "\t"
                         << "\t" << tlSorter[i].num_cars << endl;
                }

                last_printed_timestamp = sig.t_stamp; // Update the last printed timestamp
                hour_printed = true;                  // Set the flag to indicate that output for the current hour has been printed
            }
            else if (cons_count % hour_ind != 0) // Reset the flag if an hour has not passed
            {
                hour_printed = false;
            }
        }
        else
        {
            consumer_cv.wait(lk, []
                             { return !tr_sig_queue.empty(); });
        }

        lk.unlock();
        this_thread::sleep_for(chrono::milliseconds(rand() % 3000));
    }
}
// function to get data from file
void get_traff_data(int rank, const string &file)
{
    ifstream infile(file);

    if (infile.is_open())
    {
        string line;
        getline(infile, line); // Skip header line

        while (getline(infile, line))
        {
            istringstream iss(line);
            string token;

            getline(iss, token, ',');
            in.push_back(stoi(token));

            getline(iss, token, ',');
            tstamp.push_back(token);

            getline(iss, token, ',');
            tr_light.push_back(stoi(token));

            getline(iss, token);
            no_cars.push_back(stoi(token)); // Parse number of cars and store it

            rows += 1;
        }
        infile.close();
    }
    else
    {
        cerr << "Could not open file, try again." << endl;
        MPI_Abort(MPI_COMM_WORLD, 1);
    }
}

int main(int argc, char *argv[])
{
    MPI_Init(&argc, &argv);
    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    const int filename_size = 512; // Increase buffer size for filename

    char file[filename_size];

    if (rank == 0)
    {
        cout << "Enter the filename: ";
        cin >> file;
    }

    MPI_Bcast(file, filename_size, MPI_CHAR, 0, MPI_COMM_WORLD);

    // Wait for the broadcast to finish before proceeding
    MPI_Barrier(MPI_COMM_WORLD);

    // Only rank 0 reads data from the file
    if (rank == 0)
    {
        get_traff_data(rank, file);

        // Broadcast the number of rows to all processes
        MPI_Bcast(&rows, 1, MPI_INT, 0, MPI_COMM_WORLD);
    }

    // Synchronize before proceeding to ensure all processes have the data
    MPI_Barrier(MPI_COMM_WORLD);

    auto start_time = high_resolution_clock::now(); // Start time

    thread prod[prod_threads];
    thread cons[cons_threads];

    for (int i = 0; i < prod_threads; ++i)
    {
        prod[i] = thread(produce);
    }

    for (int i = 0; i < cons_threads; ++i)
    {
        cons[i] = thread(consume);
    }

    for (int i = 0; i < prod_threads; ++i)
    {
        prod[i].join();
    }

    for (int i = 0; i < cons_threads; ++i)
    {
        cons[i].join();
    }

    auto end_time = high_resolution_clock::now(); // End time

    auto duration = duration_cast<seconds>(end_time - start_time); // Calculate duration

    if (rank == 0)
    {
        cout << "Total execution time: " << duration.count() << " seconds" << endl;
    }
    MPI_Finalize();
    return 0;
}
